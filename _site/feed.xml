<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="https://radglob.com/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://radglob.com/blog/" rel="alternate" type="text/html" /><updated>2022-08-07T22:32:11-04:00</updated><id>https://radglob.com/blog/feed.xml</id><title type="html">Everything Awesome</title><subtitle>Longer screeching about things I at least think I understand.</subtitle><entry><title type="html">November 2020 Election Guide for Baltimore</title><link href="https://radglob.com/blog/baltimore/elections/2020/09/28/election-guide.html" rel="alternate" type="text/html" title="November 2020 Election Guide for Baltimore" /><published>2020-09-28T01:00:00-04:00</published><updated>2020-09-28T01:00:00-04:00</updated><id>https://radglob.com/blog/baltimore/elections/2020/09/28/election-guide</id><content type="html" xml:base="https://radglob.com/blog/baltimore/elections/2020/09/28/election-guide.html">&lt;p&gt;I’ve written my own little field guides to elections in past years, and distributed them to some
friends. But I figured this year, I’d make it public.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This year is a really contentious, terrifying, and potentially world-rending election. I could say I
don’t care which side you’re on, but I’d be lying. I’m not a huge fan of our political system at
all. A two party system forces people to choose the lesser of two evils, and things just get more
evil.&lt;/p&gt;

&lt;p&gt;This guide is opinionated. It explains how I’m going to vote, and how I’d like anyone reading to do
the same. Take it with a grain of salt, and please do your own research if you can.&lt;/p&gt;

&lt;p&gt;The questions on this year’s ballot are as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#elections&quot;&gt;Elections&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#president-and-vice-president&quot;&gt;US President and Vice President - &lt;strong&gt;Biden/Harris&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#baltimore-city-council-president&quot;&gt;Baltimore City Council President - &lt;strong&gt;Nick Mosby&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comptroller&quot;&gt;Comptroller - &lt;strong&gt;Bill Henry&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#city-council-representative&quot;&gt;Baltimore City Council Representative - &lt;strong&gt;Franca Muller Paz, District 12&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#baltimore-city-mayor&quot;&gt;Baltimore City Mayor - &lt;strong&gt;Brandon Scott&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#8th-circuit-court-judges&quot;&gt;8th Circuit Court Judges - &lt;strong&gt;Sampson can GTFO&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#us-congress&quot;&gt;US Congressional Seat - &lt;strong&gt;Kweisi Mfume&lt;/strong&gt;&lt;/a&gt; (this will differ based on your congressional district)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#court-of-special-appeals-at-large&quot;&gt;Judge, Court of Special Appeals at Large - &lt;strong&gt;Yes&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#state-questions&quot;&gt;State Questions&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#question-1&quot;&gt;Question 1 - For&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#question-2&quot;&gt;Question 2 - Against&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#city-questions&quot;&gt;City Questions&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#question-a&quot;&gt;Question A - For&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#question-b&quot;&gt;Question B - For&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#question-c&quot;&gt;Question C - For&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#question-d&quot;&gt;Question D - For&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#question-e&quot;&gt;Question E - For&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#question-f&quot;&gt;Question F - For&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#question-g&quot;&gt;Question G - For&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#question-h&quot;&gt;Question H - For&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#question-i&quot;&gt;Question I - For&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#question-j&quot;&gt;Question J - For&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#question-k&quot;&gt;Question K - Against&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;elections&quot;&gt;Elections&lt;/h1&gt;

&lt;h2 id=&quot;president-and-vice-president&quot;&gt;President and Vice President&lt;/h2&gt;

&lt;p&gt;I hope you got your protest vote out in 2016 if that’s the sort of thing you’re tickled to do. You
don’t have to be happy about how this came to be the only option (I’m certainly not), but grit your
teeth if you have to, and vote for &lt;strong&gt;Biden and Harris&lt;/strong&gt;. None of the secondary candidates have a
chance of winning, and the current administration needs to go.&lt;/p&gt;

&lt;h2 id=&quot;baltimore-city-council-president&quot;&gt;Baltimore City Council President&lt;/h2&gt;

&lt;p&gt;This is between Nick Mosby and Jovani Patterson. I’m frankly not a huge proponent of either person. 
If you haven’t followed Baltimore and Maryland politics, Nick Mosby has been around for a while, and
actually has a decent record on paper. He was involved in getting Ban the Box legislation passed at
the state and city level, worked to prevent homes from being sold out from under people due to
unpaid water bills, and a number of other excellent policy changes.&lt;/p&gt;

&lt;p&gt;His record isn’t perfect. He’s about as pro-police as most mainstream Democrats, and offered the
typical double speak claiming that the Baltimore Uprising was “unproductive”, while also stating
that there has been historic disinvestment in the communities where the outrage was most visible.
He represented that district at the time.&lt;/p&gt;

&lt;p&gt;His own good and bad aside, Marilyn Mosby, his wife, is the State’s Attorney for Baltimore. She
has had some suspect expenses, a less than stellar record dealing with police corruption, and there
was her mishandling of the trials of the police charged in the death of Freddie Gray. Even if she 
had a stronger record, as City Council President, Nick Mosby would control her budget. This is a
pretty glaring conflict of interest, and should alarm people.&lt;/p&gt;

&lt;p&gt;That said, Jovani Patterson is running as a Republican in an extremely blue city. His chances of
winning are very unlikely.&lt;/p&gt;

&lt;p&gt;Nick Mosby is definitely qualified, and has served on the city council prior to this seat. I have
concerns about him, and electing him to the second most powerful seat in the city shouldn’t be done
blindly. We, the electorate, need to keep an eye and pressure on him.&lt;/p&gt;

&lt;h2 id=&quot;comptroller&quot;&gt;Comptroller&lt;/h2&gt;
&lt;p&gt;I actually had the pleasure to meet Bill Henry when he was running against then-incumbent Joan Pratt
during the Democratic primary. Comptroller is a very important position in city government, despite
many people not having any idea what they do. Think of them as the city’s main accountant.&lt;/p&gt;

&lt;p&gt;I don’t make a habit of rubbing shoulders with bureaucrats, but Bill struck me as a genuine, honest
person. He’s also running unopposed. Still, I would recommend voting for him. This is one of the few
elections I feel no conflict about (and again, not just because he’s unopposed).&lt;/p&gt;

&lt;h2 id=&quot;city-council-representative&quot;&gt;City Council Representative&lt;/h2&gt;
&lt;p&gt;I live in District 12, so you’ll need to look into this a bit more if you live in another. I gave the
map a quick look, and about half of the districts even have GOP challengers to the Democratic
candidates.&lt;/p&gt;

&lt;p&gt;District 12 is a really cool race though! Robert Stokes, the incumbent, has been in this seat since&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The Democratic primary was a very close race, with Philip Westry tailing by 248 votes.
By all accounts, he didn’t really have much of a campaign message besides not being Robert Stokes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Despite being a fixture in Baltimore politics, by all accounts, Stokes is fairly worthless as a
councilman, and is more or less expecting to coast through. Luckily, Franca Muller Paz is running
under the Green Party.&lt;/p&gt;

&lt;p&gt;Her campaign is specifically the sort of campaign I want to see from progressive candidates. She’s
been a teacher for years, helped file lawsuits with the ACLU to better school conditions, and has
had a phenomenal canvassing and ground game. I had the chance to chat with briefly when she was
canvassing on my street (which, for some reason, the community association in my neighborhood
regularly avoids). She’s passionate, engaged, and brings exactly the kind of energy we need in city
government.&lt;/p&gt;

&lt;p&gt;If you’re in District 12, vote for her. Even if you’re not, consider donating to her campaign. She’s
received endorsements from the Metro Baltimore Council AFL-CIO, making her the first third party
candidate to have received the endorsement.&lt;/p&gt;

&lt;p&gt;This is the only competitive city council race in the city. If she wins, it could embolden more
third-party candidates to run in the future, and really shake up what’s possible in the city.&lt;/p&gt;

&lt;h2 id=&quot;baltimore-city-mayor&quot;&gt;Baltimore City Mayor&lt;/h2&gt;
&lt;p&gt;The primary races for Mayor were absolutely insane. Last time I made one of these guides, the
Democratic primary alone took up most of my time, with upwards of 20 candidates.&lt;/p&gt;

&lt;p&gt;The general election is much simpler, with essentially three viable options. I’ll go from least
viable to most.&lt;/p&gt;

&lt;h3 id=&quot;shannon-wright-gop&quot;&gt;Shannon Wright (GOP)&lt;/h3&gt;
&lt;p&gt;Shannon Wright is running under the GOP ticket. If you look into her stances, they sound decent on
the surface: focus on education, public safety, and job creation. These are pretty standard lines
for any conservative candidate. Yet, if you try to dig beneath the surface, the ideas get quite
sinister.&lt;/p&gt;

&lt;p&gt;Particularly in regards to public safety, she makes fairly empty statements about police reform.
No statements that she’ll work towards defunding, obviously. There are remarks about removing
corruption within BPD, but no steps on how to move forward are given. Then things get really bizarre.&lt;/p&gt;

&lt;p&gt;She advocates for forming neighborhood anti-crime patrols, ignoring the “civil rights” of drug
dealers in public housing (I only use quotes above because she did on her campaign website), and
advocating for DOJ and HUD to take further steps to stem violent crime.&lt;/p&gt;

&lt;p&gt;It’s a very anti-poor stance, and doesn’t actually address root causes in any way. Hard pass.&lt;/p&gt;

&lt;h3 id=&quot;bob-wallace-independent&quot;&gt;Bob Wallace (Independent)&lt;/h3&gt;
&lt;p&gt;I’m not going to spend too much time on this guy, because there doesn’t really be much to go off of.
He hasn’t held any office as far as I can tell, and is trying the tired “businessman-to-politician”
shtick which never really works.&lt;/p&gt;

&lt;p&gt;Government isn’t a business. It needs to be a good steward of tax funds, but it’s not meant to save
money. It’s meant to improve everything, for everyone. I know, it already doesn’t work like that.
But sticking someone in a representative office from a transactional one, and hoping things will
somehow work out, doesn’t make any sense to me. That leaves us with…&lt;/p&gt;

&lt;h3 id=&quot;brandon-scott-democratic&quot;&gt;Brandon Scott (Democratic)&lt;/h3&gt;
&lt;p&gt;The current City Council President, Brandon has been in city government for a third of his life, and
he’s 36. I’ve never interacted with him directly, and while I don’t have any glowing recommendations,
he’s definitely the best choice for Mayor.&lt;/p&gt;

&lt;p&gt;I suppose I could lob some complaint about how if he’s been in office for so long, and things are the
way they are, why not try someone new? Because this is a &lt;strong&gt;strong mayor&lt;/strong&gt; city. Time for a little
talk about how the Board of Estimates works.&lt;/p&gt;

&lt;p&gt;The Board of Estimates is the body that effectively decides where city funds go. There are 5 seats
in total. One goes to the Comptroller, one to the Mayor, and one to the City Council President. The
remaining seats go to the City Solicitor, and the Director of the board. Those last two seats are
appointed by the Mayor, so they effectively control those seats, too. The mayor has majority decision
power on how funds are spent, and therefore, what happens.&lt;/p&gt;

&lt;p&gt;I think Brandon would make a fine mayor. Give him your vote.&lt;/p&gt;

&lt;h2 id=&quot;8th-circuit-court-judges&quot;&gt;8th Circuit Court Judges&lt;/h2&gt;
&lt;p&gt;I’m sorry for mostly mailing this one in. Judges are not nearly as straightforward to get information
about. I’m not a lawyer, and I try to stay as far away from the legal profession and anything
connected to it. Everything I know about Baltimore City judges, I’ve gleaned from the
&lt;a href=&quot;https://twitter.com/bmorecourtwatch&quot;&gt;Baltimore Courtwatch&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/BALTLegal&quot;&gt;BALT&lt;/a&gt;
twitter feeds.&lt;/p&gt;

&lt;p&gt;I can’t say much about most of them, but Sampson seems to toss out Held Without Bond (HWOB) judgements
more than seems necessary, so I think he should probably go.&lt;/p&gt;

&lt;p&gt;Again, talk to someone else about this.&lt;/p&gt;

&lt;h2 id=&quot;us-congress&quot;&gt;US Congress&lt;/h2&gt;
&lt;p&gt;I’m in District 7, so it’s race between Kweisi Mfume and Kim Klacik. &lt;del&gt;There are two other independent
candidates, Amber Ivey and Gary Schuman. No offense to either of the independents, but I’ve never
heard their names come up until I started doing more research for this. And in the case of Schuman,
there’s not a lot to go on.&lt;/del&gt; &lt;strong&gt;Edit&lt;/strong&gt;: Neither of these people ended up on the actual ballot. Ivey is planning
a run in 2022, so she may be someone to keep an eye on for the future.&lt;/p&gt;

&lt;p&gt;&lt;del&gt;If I felt more confidence it wouldn’t be a vote tossed into the void, I’d suggest considering Ivey.
She looks to have a decent professional background beneath her, working in private industry before
transitioning to the public and non-profit sectors as a data and policy analyst. Definitely not the
worst kind of person to have in Congress. Also, she’s not old.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;I don’t say this to come across as ageist.&lt;/del&gt; I’m just pretty over the gerontocracy we’re currently in.
Representative terms are only two years in theory, but I’m not about to elect anyone in their 70s
unless their politics are radical. Sadly, Mfume’s do not appear to be, at least by current standards.&lt;/p&gt;

&lt;p&gt;I would still recommend voting for him. The only other viable candidate is Klacik, and I have
nothing good to say about her. She seems to have used her entire campaign to bash Baltimore. She
seems to be running more of a fear-based mayoral or city council campaign than anything else. I don’t
appreciate it. Hard pass on &lt;a href=&quot;https://twitter.com/KimberlyWriter/status/1302636832161697798&quot;&gt;Ruin Porn Barbie&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’re in another Congressional district, and you might be, please do some research. It’s a general
election, and if you’re reading this, you’re not likely to vote for a Republican anyway. But do your
research. Third party candidates do exist, and can run solid campaigns.&lt;/p&gt;

&lt;h2 id=&quot;court-of-special-appeals-at-large&quot;&gt;Court of Special Appeals at Large&lt;/h2&gt;
&lt;p&gt;As with the above judges, I don’t really know how to find conclusive evidence one way or the other.
However, looking at Judge Wells’ professional history, he seems to have a bent towards equal rights.&lt;/p&gt;

&lt;p&gt;I’m voting yes, but I don’t feel comfortable saying what anyone else should do.&lt;/p&gt;

&lt;h1 id=&quot;state-questions&quot;&gt;State Questions&lt;/h1&gt;

&lt;h2 id=&quot;question-1&quot;&gt;Question 1&lt;/h2&gt;
&lt;p&gt;This is a state-level change, and an important one to vote FOR on. Currently, the General Assembly is
only able to reduce the state’s budget. This would allow them to increase or redirect funding as well.
They cannot exceed the total proposed budget put forth by the Governor.&lt;/p&gt;

&lt;p&gt;Most state legislatures already operate like this, so this will give the legislature more control over
state spending.&lt;/p&gt;

&lt;p&gt;Maryland’s General Assembly is also predominantly Democratic (32 vs 15 in the Senate, 99 vs 42 in the House).
This would act as a strong counter to Maryland’s frequent Republican governors.&lt;/p&gt;

&lt;h2 id=&quot;question-2&quot;&gt;Question 2&lt;/h2&gt;
&lt;p&gt;Question 2 is to allow an expansion of commercial gaming to allow betting on sports and events, ostensibly
to raise money for education. I remember back when the casino expansion happened. They said the same thing
about that, but in reality, then ended up siphoning money out of education, so it ended up being net neutral.
While also bringing up the inherent issues with gambling and casinos.&lt;/p&gt;

&lt;p&gt;I’m voting AGAINST this one.&lt;/p&gt;

&lt;p&gt;I don’t care one way or the other. This isn’t a moral issue for me. If people want to bet on sports, that’s their
business. I don’t want to invite a situation where schools with get even less funding than they already do.&lt;/p&gt;

&lt;h1 id=&quot;city-questions&quot;&gt;City Questions&lt;/h1&gt;

&lt;h2 id=&quot;question-a&quot;&gt;Question A&lt;/h2&gt;
&lt;p&gt;Question A is on an ordinance to allow the Mayor and the City Council to borrow up to $12MM for
affordable housing initiatives. Having spent a few years here, and seen the prevalence of luxury
condos go up (with paltry if any affordable housing units), while there is a dearth of general
affordable housing, and a large volume of vacant buildings throughout large swathes of the city,
this will almost always be something I support. I think you should too. Vote FOR.&lt;/p&gt;

&lt;h2 id=&quot;question-b&quot;&gt;Question B&lt;/h2&gt;
&lt;p&gt;This is on an ordinance to provide up to $38MM for building new schools, as well as making renovations to
existing ones. Baltimore schools suffer from several deficiencies. While facilities are only a part
of it, they are a huge factor. Lead in the water and a lack of proper climate control both make for
inhospitable environments for the city’s children. Vote FOR.&lt;/p&gt;

&lt;h2 id=&quot;question-c&quot;&gt;Question C&lt;/h2&gt;
&lt;p&gt;Voting FOR on this ordinance would allow the Mayor and City Council to borrow up to $38MM for
economic and community development projects. This sounds a bit vague, but basically, this is money
for small businesses, parks, and other infrastructure that allows communities to thrive. I personally
think these are the sort of funds local municipalities should be dispersing, as opposed to that
development being placed in non-profit and private hands.&lt;/p&gt;

&lt;h2 id=&quot;question-d&quot;&gt;Question D&lt;/h2&gt;
&lt;p&gt;The final bond issue, this provides up to $72MM for public infrastructure. This is anything from
public parks and fire stations, to library buildings and tree placement. Vote FOR.&lt;/p&gt;

&lt;p&gt;A note on the bond issues: I don’t know where the city would be borrowing this money from. While
this is a topic worth investigating further, it is money well spent. All of these projects would
be public goods. That alone is something worth aspiring to. Private investment, while a source of
capital, comes with a lot of strings, and tends to exclude certain people.&lt;/p&gt;

&lt;h2 id=&quot;question-e&quot;&gt;Question E&lt;/h2&gt;
&lt;p&gt;This is the first of a number of procedural issues for the city council. This requires a Charter
Revision Commission to meet &lt;strong&gt;at least&lt;/strong&gt; once every 10 years. Currently, the city charter is
reviewed on an ad-hoc schedule. With the new requirement, the process would be apolitical. Vote FOR.&lt;/p&gt;

&lt;h2 id=&quot;question-f&quot;&gt;Question F&lt;/h2&gt;
&lt;p&gt;This question is analogous to Question 1 at the state level. Currently, the Baltimore City Council
has the ability to decrease expenditures, but not reallocate or increase funding. This would allow
them to have greater control over the budget, serving as an important check against the mayor. Vote
FOR.&lt;/p&gt;

&lt;h2 id=&quot;question-g&quot;&gt;Question G&lt;/h2&gt;
&lt;p&gt;This resolution would change the threshold for overriding a mayoral veto from 3/4 of the council to
2/3. In actual terms, this is a change from 12 people to 10. Importantly, it would also separate the
veto process for appropriation bills (changes to the budget), requiring separate bills to be written
as opposed to being added as line items to existing bills. Another powerful check on the executive.
Vote FOR.&lt;/p&gt;

&lt;h2 id=&quot;question-h&quot;&gt;Question H&lt;/h2&gt;
&lt;p&gt;Currently, if the mayor wants to veto a bill, they can choose to do so at a time when the full
council may be unable to convene. This resolution allows for extra time for the council to convene
and counter a mayoral veto, if no council meeting was scheduled during the normal veto period.&lt;/p&gt;

&lt;p&gt;Given that Baltimore is a strong mayor city, we should opt for as many checks on the executive as
possible. Vote FOR.&lt;/p&gt;

&lt;h2 id=&quot;question-i&quot;&gt;Question I&lt;/h2&gt;
&lt;p&gt;This measure is on the removal of certain elected officials (council members, city council president,
mayor, and comptroller). It would allow 3/4 of the council to vote to remove any of the listed
officials for incompetency, misconduct, willful neglect of office, or a felony or misdemeanor brought
against them by relevant parties.&lt;/p&gt;

&lt;p&gt;Given our unfortunate history of corrupt or neglectful politicians, I think this is an incredibly
important measure. Let’s hold our elected officials to task. Vote FOR.&lt;/p&gt;

&lt;h2 id=&quot;question-j&quot;&gt;Question J&lt;/h2&gt;
&lt;p&gt;This measure would give the city auditor more power to force government employees to produce documents
for the purposes of an audit. This is a pretty straightforward one to me. Vote FOR.&lt;/p&gt;

&lt;h2 id=&quot;question-k&quot;&gt;Question K&lt;/h2&gt;
&lt;p&gt;I’m conflicted on this last one. If you haven’t gathered from my previous recommendations, I have
serious concerns about executive and, more generally, unelected power. I’m not sure I fully
understand what the Chief Administration Officer is supposed to do, but it seems a lot like the
CEO at a for-profit company.&lt;/p&gt;

&lt;p&gt;Given that this is an appointed, and not elected position, I’m personally against it. However, I’ll
admit my ignorance. It might be a useful addition. But with a strong executive already, I don’t
feel good giving more power to positions that can’t be controlled by the electorate. I don’t know
what the removal criteria is for this role (I assume the mayor or city council president would remove
them if needed).&lt;/p&gt;

&lt;p&gt;I’m voting AGAINST.&lt;/p&gt;

&lt;p&gt;Hopefully this guide was somewhat useful to anyone who read it. I’ll work on making these more
thorough and less editorial in the future. But it’s hard to be objective in our current timeline.&lt;/p&gt;</content><author><name></name></author><category term="baltimore" /><category term="elections" /><category term="baltimore" /><category term="elections" /><summary type="html">I’ve written my own little field guides to elections in past years, and distributed them to some friends. But I figured this year, I’d make it public.</summary></entry><entry><title type="html">Configuring Kitty</title><link href="https://radglob.com/blog/2020/03/05/configuring-kitty.html" rel="alternate" type="text/html" title="Configuring Kitty" /><published>2020-03-05T09:00:00-05:00</published><updated>2020-03-05T09:00:00-05:00</updated><id>https://radglob.com/blog/2020/03/05/configuring-kitty</id><content type="html" xml:base="https://radglob.com/blog/2020/03/05/configuring-kitty.html">&lt;p&gt;I pretty much live in a mix of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vim&lt;/code&gt;, a terminal, and a web browser. At most of
my jobs, I’ve been given a Macbook, but at home, I use Linux (System76’s
excellent &lt;a href=&quot;https://system76.com/pop&quot;&gt;Pop!_OS&lt;/a&gt; for now). Recently, I’ve been
trying to simplify/unify my setup so things work mostly the same between the
two systems.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I’ve been using &lt;a href=&quot;https://github.com/tonsky/FiraCode&quot;&gt;FiraCode&lt;/a&gt; as my monospaced
font for a while, and needed a terminal emulator that supported ligatures. On
MacOS, &lt;a href=&quot;https://iterm2.com&quot;&gt;iTerm2&lt;/a&gt; handled this, but the default GNOME terminal
did not. &lt;a href=&quot;https://sw.kovidgoyal.net/kitty/&quot;&gt;kitty&lt;/a&gt; is a super fast terminal that
works on both systems, so I gave that a try.&lt;/p&gt;

&lt;p&gt;The speed was the first thing that blew me away. Despite having relatively
minimal configuration in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vim&lt;/code&gt;, most terminals still took a noticeable amount of
time to even open an empty file. With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kitty&lt;/code&gt;, it’s largely imperceptible. The
configuration is just a small file (or series of files) that are very well
documented and easy for me to understand.&lt;/p&gt;

&lt;p&gt;I did run into one issue that took me a little bit of time to solve. I installed
FiraCode with the &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;NerdFonts&lt;/a&gt; project. I’m not sure
if this is an issue with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CoreText&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fontconfig&lt;/code&gt;, how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kitty&lt;/code&gt; uses either one,
or something else, but despite installing the same font files on both systems,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kitty&lt;/code&gt; recognized the font files with different names.&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kitty.conf&lt;/code&gt;, the main system font is declared with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;font_family&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# kitty.conf
font_family FiraCode Nerd Font Retina
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As far as I’ve been able to ascertain, this doesn’t accept
multiple font names in line. In order to have a largely shared configuration, I
created two additional files, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Linux.conf&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Darwin.conf&lt;/code&gt;. These correspond to
the output of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uname -S&lt;/code&gt;, since my original intention was to set a global
environment variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OS&lt;/code&gt; to the output of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uname -S&lt;/code&gt;. Then, at the bottom of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kitty.conf&lt;/code&gt;, I would include the correct file conditionally based on the
content of that variable.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# kitty.conf
...
include ${OS}.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Each file (for now), only has one line.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Linux.conf
font_family Fira Code Retina Nerd Font Complete Mono
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Darwin.conf
font_family FiraCode Nerd Font Retina
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This seemed to work with only a few issues. On MacOS, the OS specific include
worked, in as much as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kitty --debug-config&lt;/code&gt; would display the correct font,
but it wouldn’t actually get used. I’m not sure why. Setting the MacOS font name
with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;font_family&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kitty.conf&lt;/code&gt; worked though. And the OS specific include
worked on Linux. I think kitty requires that whatever &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;font_family&lt;/code&gt; is set to
when all of the configurations are loaded must exist. Otherwise, it seems to
fail to load it.&lt;/p&gt;</content><author><name></name></author><category term="kitty" /><category term="cli" /><summary type="html">I pretty much live in a mix of vim, a terminal, and a web browser. At most of my jobs, I’ve been given a Macbook, but at home, I use Linux (System76’s excellent Pop!_OS for now). Recently, I’ve been trying to simplify/unify my setup so things work mostly the same between the two systems.</summary></entry><entry><title type="html">APIs should be more usable.</title><link href="https://radglob.com/blog/2020/03/04/apis-should-be-more-usable.html" rel="alternate" type="text/html" title="APIs should be more usable." /><published>2020-03-04T13:18:00-05:00</published><updated>2020-03-04T13:18:00-05:00</updated><id>https://radglob.com/blog/2020/03/04/apis-should-be-more-usable</id><content type="html" xml:base="https://radglob.com/blog/2020/03/04/apis-should-be-more-usable.html">&lt;p&gt;I’ve used a lot of third party APIs for work and personal projects. While some
APIs are phenomenally documented and well-designed (for example, &lt;a href=&quot;https://stripe.com/docs&quot;&gt;Stripe&lt;/a&gt;), to a fault, error handling is not great.&lt;/p&gt;

&lt;p&gt;I see two fundamental issues here. First, most APIs don’t document their failure
cases well. Second, when an API library is provided, they aren’t particularly
explorable.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Solving the first problem seems straightforward to me. In documentation, error
cases and their causes should be documented. This doesn’t need to be exhaustive.
Enumerating how one might trigger a 5XX error seems unnecessary, but if there
are other known ways one might trigger a 404, that should be clear. Given that
most APIs I’ve seen barely adhere to proper response codes across the board, I
don’t predict we’ll see this anytime soon.&lt;/p&gt;

&lt;p&gt;The second issue is much more involved, but would greatly improve adoption. When
someone downloads your first-pary API wrapper, it should do a few things.&lt;/p&gt;

&lt;p&gt;First, work offline. This might seem odd, but I think API clients should include
some way to trigger known response without having to actually reach your servers.&lt;/p&gt;

&lt;p&gt;Let’s assume I have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/users&lt;/code&gt; endpoint. It can take two parameters:
a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;last_name&lt;/code&gt; substring for what the users’ last name starts with, and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count&lt;/code&gt;
of how many users the query should return. A call to this endpoint might look
like this:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;last_name:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Ar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;count:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If this is live on production, it should query the server and return the correct
data. However, if we started our client with an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;offline: true&lt;/code&gt; flag, the client
should be able to return some random generated data. Given that you know the
schema of your API, this should be easy to generate, and could be produced
consistently by setting seed values for your RNG.&lt;/p&gt;

&lt;p&gt;If you’re then operating on some fake, local data, you should be able to handle
most cases where you would need to create new data or mutate something as well.
Deletion would be an odd case, but as long as you created new data when a client
was started, this could be reasonably handled.&lt;/p&gt;

&lt;p&gt;The second improvement I would suggest is explorable errors. With our above API
call, if instead of executing the function, if we instead ran
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API.list_users.errors&lt;/code&gt;, we should get a log of the possible error cases.
Calling something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API.list_users.errors.NegativeCount&lt;/code&gt; could then
explain the error case in further detail.&lt;/p&gt;

&lt;p&gt;I might through together an example API for this to demonstrate, but for now, it’s
just something I’m mulling over. I’ve worked with enough APIs that can’t be used
offline without somewhat precarious mocks, and it feels like a place that could
use improvement.&lt;/p&gt;</content><author><name></name></author><category term="apis" /><summary type="html">I’ve used a lot of third party APIs for work and personal projects. While some APIs are phenomenally documented and well-designed (for example, Stripe), to a fault, error handling is not great.</summary></entry><entry><title type="html">Migrating Ecto references without `execute`.</title><link href="https://radglob.com/blog/2019/07/14/modifying-ecto-references.html" rel="alternate" type="text/html" title="Migrating Ecto references without `execute`." /><published>2019-07-14T20:00:00-04:00</published><updated>2019-07-14T20:00:00-04:00</updated><id>https://radglob.com/blog/2019/07/14/modifying-ecto-references</id><content type="html" xml:base="https://radglob.com/blog/2019/07/14/modifying-ecto-references.html">&lt;p&gt;I made a mistake on an Ecto migration, forgetting to add an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on_delete&lt;/code&gt;
declaration.  This went unnoticed for a while, until someone in the admin panel
of the application noticed that attempts to delete a certain record kept
throwing 500 errors back.&lt;/p&gt;

&lt;p&gt;I needed to update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;references&lt;/code&gt; part of the schema, but altering the table
with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modify&lt;/code&gt; would fail since there was an existing constraint. I needed to
clear this constraint first.&lt;/p&gt;

&lt;p&gt;Most suggestions I saw online to fix this suggested using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execute&lt;/code&gt;
function. While this will do the trick, I try to avoid using raw SQL as much as
possible. Turns out, you can get the same effect using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drop constraint&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Assume you have a table called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;products&lt;/code&gt; with a foreign key to another table
called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manufacturers&lt;/code&gt;. The constraint might have a name like
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;products_manufacturers_id_fkey&lt;/code&gt;.  You can remove this in one of (at least) two
ways.&lt;/p&gt;

&lt;p&gt;First, with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execute&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ALTER TABLE products DROP CONSTRAINT products_manufacturers_id_fkey&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But you can do the same with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drop constraint&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;products&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;products_manufacturers_id_fkey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The second one tripped me up at first, because documentation for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;constraint/2&lt;/code&gt;
don’t have this kind of repetition between the table and the constraint key.&lt;/p&gt;

&lt;p&gt;Hopefully this helps someone else.&lt;/p&gt;</content><author><name></name></author><category term="elixir" /><category term="ecto" /><summary type="html">I made a mistake on an Ecto migration, forgetting to add an on_delete declaration. This went unnoticed for a while, until someone in the admin panel of the application noticed that attempts to delete a certain record kept throwing 500 errors back.</summary></entry><entry><title type="html">Little bash thing I learned.</title><link href="https://radglob.com/blog/2019/06/18/little-bash-thing.html" rel="alternate" type="text/html" title="Little bash thing I learned." /><published>2019-06-18T20:00:00-04:00</published><updated>2019-06-18T20:00:00-04:00</updated><id>https://radglob.com/blog/2019/06/18/little-bash-thing</id><content type="html" xml:base="https://radglob.com/blog/2019/06/18/little-bash-thing.html">&lt;p&gt;I never learned &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bash&lt;/code&gt; all that well because I never really needed to. By the
time I was digging into a lot of command-line stuff, projects like
&lt;a href=&quot;https://ohmyz.sh/&quot;&gt;oh-my-zsh&lt;/a&gt; were fairly popular, so a lot of command-line
stuff was already around for me.&lt;/p&gt;

&lt;p&gt;I’ve learned and forgotten bits of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sed&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt; here and there. They’re
useful, but often more trouble for me to use and remember than it is to learn on
other tools.&lt;/p&gt;

&lt;p&gt;That said, I do try to add little aliases here and there for myself. I’ve been
trying to keep on top of my daily work by logging things. I use a pretty simple
format for my log file names: YYYY-MM-DD.md. I also use tmux heavily.&lt;/p&gt;

&lt;p&gt;When I initially wrote my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log&lt;/code&gt; alias, it looked like this:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vim &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%Y-m-d&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This worked pretty well at first. But I started to notice an issue when running
this alias in a tmux session that was a few days old. The date on the file would
be wrong. It would be set to the date that the tmux session started, not when I
ran the command.&lt;/p&gt;

&lt;p&gt;To fix this, I changed the alias to&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vim &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%Y-%m-%d&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I don’t really know the difference between the two expansions, but I’ve only
really leaned on them at runtime. This might be obvious to someone who knows how
bash works, but it was interesting to me.&lt;/p&gt;

&lt;h3 id=&quot;edit-2020-03-04&quot;&gt;EDIT: 2020-03-04&lt;/h3&gt;
&lt;p&gt;I should have read the man pages for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;date&lt;/code&gt;. This is even simpler.&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vim &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="bash" /><summary type="html">I never learned bash all that well because I never really needed to. By the time I was digging into a lot of command-line stuff, projects like oh-my-zsh were fairly popular, so a lot of command-line stuff was already around for me.</summary></entry><entry><title type="html">Building chatbots with Hedwig.</title><link href="https://radglob.com/blog/2019/04/24/building-chatbots-with-hedwig.html" rel="alternate" type="text/html" title="Building chatbots with Hedwig." /><published>2019-04-24T20:00:00-04:00</published><updated>2019-04-24T20:00:00-04:00</updated><id>https://radglob.com/blog/2019/04/24/building-chatbots-with-hedwig</id><content type="html" xml:base="https://radglob.com/blog/2019/04/24/building-chatbots-with-hedwig.html">&lt;p&gt;Chatbots are so 2018. I think they were definitely a fad which has seemed to die
down. That said, they’re still pretty useful.&lt;/p&gt;

&lt;p&gt;I found myself needing to write one. These days, I mostly work in Elixir. So
after looking around for a chatbot framework, I came across
&lt;a href=&quot;http://github.com/hedwig-im/hedwig&quot;&gt;Hedwig&lt;/a&gt;. It’s an Elixir (check) chatbot
framework (check) with a cool name and logo (check check). I assume it’s named
after an owl from some book I didn’t read as a kid.&lt;/p&gt;

&lt;p&gt;Taking a look at the documentation, I could see it was a little out-of-date with
regards to Elixir and how supervision trees are used. It took me a bit of time
to parse through their docs to get this running, so I figured I’d do a quick
writeup to save myself the confusion again in the future.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;Creating a new project with Hedwig is pretty easy. First, you’ll want to create
a new Elixir project with a supervision tree. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix&lt;/code&gt; makes this simple if you’re
unfamiliar with how to set this up yourself.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix new chatbot --sup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, we’ll need to add the Hedwig dependency to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix.exs&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# mix.exs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Chatbot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MixProject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Project&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;app:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:chatbot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;elixir:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 1.7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;start_permanent:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:prod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;deps:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;extra_applications:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;mod:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Chatbot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:hedwig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix deps.get&lt;/code&gt; to install Hedwig. Now we can create our chatbot. The
skeleton of it, at least.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; mix hedwig.gen.robot

Welcome to the Hedwig Robot Generator!

Let&lt;span class=&quot;s1&quot;&gt;&apos;s get started.

What would you like to name your bot?: testrobot
Available adapters

1. Hedwig.Adapters.Console
2. Hedwig.Adapters.Test

Please select an adapter: 1
* creating lib/chatbot
* creating lib/chatbot/robot.ex
* updating config/config.exs

Don&apos;&lt;/span&gt;t forget to add your new robot to your supervision tree
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;typically &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;lib/chatbot.ex&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:

    worker&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Chatbot.Robot, &lt;span class=&quot;o&quot;&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This last part is a bit outdated. Instead of using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;worker/2&lt;/code&gt;, we’re just going
to add our chatbot as a child of our supervision process.&lt;/p&gt;

&lt;p&gt;Let’s update &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/chatbot/application.ex&lt;/code&gt; to add our new chatbot to the
supervision tree.&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# lib/chatbot/application.ex&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Chatbot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;@moduledoc&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Add your chatbot here.&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Chatbot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Robot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;strategy:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:one_for_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Chatbot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Supervisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Supervisor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s all we need to do to get this going. We set up our chatbot to use
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hedwig.Adapters.Console&lt;/code&gt;, so we can test this without hooking it up to Slack or
some other service.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; mix run &lt;span class=&quot;nt&quot;&gt;--no-halt&lt;/span&gt;

Hedwig Console - press Ctrl+C to exit.

The console adapter is useful &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;quickly verifying how your
bot will respond based on the current installed responders

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this prompt, we can test that this thing works. By default, the chatbot
generator will have included &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hedwig.Responders.Help&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hedwig.Responders.Ping&lt;/code&gt;. Both of these responders use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;respond/2&lt;/code&gt;, which
requires that you identify the chatbot by name. In this case, our chatbot is
called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testrobot&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; testrobot &lt;span class=&quot;nb&quot;&gt;help
&lt;/span&gt;testrobot&amp;gt; testrobot &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt; - Displays all of the &lt;span class=&quot;nb&quot;&gt;help &lt;/span&gt;commands that testrobot knows about.
testrobot &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt; &amp;lt;query&amp;gt; - Displays all &lt;span class=&quot;nb&quot;&gt;help &lt;/span&gt;commands that match &amp;lt;query&amp;gt;.
testrobot: ping - Responds with &lt;span class=&quot;s1&quot;&gt;&apos;pong&apos;&lt;/span&gt;
testrobot &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; - Echos &lt;span class=&quot;s2&quot;&gt;&quot;Wow&quot;&lt;/span&gt; when the user enters &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; testrobot ping
testrobot&amp;gt; user: pong
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Great, it works. Now let’s write our own responder.&lt;/p&gt;

&lt;h2 id=&quot;responders&quot;&gt;Responders&lt;/h2&gt;

&lt;p&gt;Responders are the part of the Hedwig framework that specify how chatbots
interpret and respond to messages. Let’s write a quick “Hello, World!” example.&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# lib/chatbot/responders/hello_world.ex&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Chatbot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Responders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hedwig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Responder&lt;/span&gt;

  &lt;span class=&quot;nv&quot;&gt;@usage&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;
  hedwig hello - Echos &quot;world&quot; when the user says &quot;hello&quot;.
  &quot;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;hear&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;~r/hello$/i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;world&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can add this to our chatbot in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/config.exs&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/config.exs&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:chatbot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Chatbot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Robot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;adapter:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hedwig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Adapters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;testrobot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;aka:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;responders:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Hedwig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Responders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Hedwig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Responders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Ping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Chatbot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Responders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HelloWorld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The other two responders in the configuration are the defaults Hedwig adds on
creation. You can remove them if you want.&lt;/p&gt;

&lt;p&gt;Now, if we run the chatbot again with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix run --no-halt&lt;/code&gt;, we can test our new
commmand.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; hello
testrobot&amp;gt; world
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Hello
testrobot&amp;gt; world
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; HeLlO
testrobot&amp;gt; world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Great! Notice that this command isn’t namespaced. What I mean that is we aren’t
required to specify what chatbot we want to respond. This is how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hear/4&lt;/code&gt;
macro works. Our chatbots will listen to any message coming over the wire, and
respond when it matches, even if it wasn’t addressed to them.&lt;/p&gt;

&lt;p&gt;In most cases, we’ll want our commands to be addressed. We can fix this with a
quick change.&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# lib/chatbot/responders/hello_world.ex&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hear&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;~r/hello$/i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;respond&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;~r/hello$/i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;world&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, if we run our chatbot, it will only respond to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello&lt;/code&gt; command if we
say its name first (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testrobot&lt;/code&gt;, if you forgot).&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; hello
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; testrobot hello
testrobot&amp;gt; world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s the basics of creating a chatbot with Hedwig. Next, we’ll look at how to
manage conversational state, which is useful if you want users to feel like
they’re having a conversation and not sending one-off messages.&lt;/p&gt;</content><author><name></name></author><category term="elixir" /><category term="chatbots" /><summary type="html">Chatbots are so 2018. I think they were definitely a fad which has seemed to die down. That said, they’re still pretty useful.</summary></entry><entry><title type="html">Strength in Numbers</title><link href="https://radglob.com/blog/python/2016/07/09/strength-in-numbers.html" rel="alternate" type="text/html" title="Strength in Numbers" /><published>2016-07-09T20:00:00-04:00</published><updated>2016-07-09T20:00:00-04:00</updated><id>https://radglob.com/blog/python/2016/07/09/strength-in-numbers</id><content type="html" xml:base="https://radglob.com/blog/python/2016/07/09/strength-in-numbers.html">&lt;p&gt;I’ve gone back and forth about my language choices over the years. Some of those
changes have been based on inexperience (Python is really easy to learn), some
on curiosity (Clojure is so different! What are LISPs all about?!). Others have
been based in a kind of misplaced egoism, followed by a quick return to reality:
“Surely &lt;em&gt;I&lt;/em&gt; am smart enough to use Haskell!” (&lt;strong&gt;reads about monads and is still
mostly confused&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;There was nothing wrong with any of these choices. They all happened at points
in my development that made sense. What I’m learning now, is that there is a lot
of wisdom in returning to your roots. I found it odd that MIT stopped using
SICP, but their rationale was fair: we moved from &lt;em&gt;programming-by-composition&lt;/em&gt;
to &lt;em&gt;programming-by-poking&lt;/em&gt;. All the same, I still think there is value there.&lt;/p&gt;

&lt;p&gt;SICP gives beginners two differing ways of considering the field of computing.
Using Scheme, you consider computing from the perspective of data and
transformations. These abstractions allow you to move quickly, to build and
compose small pieces, and create large pieces of well-understood, yet robust
software. Using C, you consider the computer as it works in physical terms. How
memory works, how the CPU executes instructions, etc. (IMO, this should be
reinforced more than it is in contemporary computer science).&lt;/p&gt;

&lt;p&gt;Both C and Scheme, by design, are simple languages. This was a conscious choice
by the writers of SICP. I’m beginning to favor these choices in my own life as
well. The beauty of simple languages is that they are easy to understand.&lt;/p&gt;

&lt;p&gt;At my previous job, I ended up using Clojure and ClojureScript for a large
application. We had used NodeJS and JavaScript in our initial version, but found
ourselves running into a lot of issues with JavaScript itself, that Clojure
seemed to alleviate. We had a great time from there, producing features at a
much faster rate than we did with JS, and it was more performant as far as we
could tell. It wasn’t all positive though.&lt;/p&gt;

&lt;p&gt;Our employer was a small research lab, and in giving us carte blanche to pick
our stack, they essentially doomed the project at the same time. Funding issues
arose, and I left the project. My former coworker, who I still keep in touch
with, is also looking to leave for similar reasons. When he does, the project
will likely die.&lt;/p&gt;

&lt;p&gt;This isn’t because the concepts of the project are hard to grasp. Nor is Clojure
a particularly hard language to learn. The problem is a subtle one. Clojure
mostly represents a hurdle because it is a LISP. Many programmers are thrown off
by the parentheses or something. Which is unfortunate because LISP semantics are
really simple.&lt;/p&gt;

&lt;p&gt;Python is an interesting case here. Some developers have an issue with
whitespace sensitivity, but aside from that, it is a generally well-favored
language. More interestingly, it has had &lt;em&gt;significant&lt;/em&gt; uptake by the greater
scientific community. As a result, there are a tremendous number of mature
libraries for doing pretty much anything, from interactive graphing to computer
vision.&lt;/p&gt;

&lt;p&gt;It’s also incredibly easy to find developers that know Python, even if they
don’t have a traditional computer science background. This (in my experience) is
usually not a problem, though developers without a CS background may require
more oversight to adhere to code standards, complexity analysis, etc.&lt;/p&gt;

&lt;p&gt;The main point is that by choosing a simple, popular system, you gain strength
in numbers. The problems you run into will hardly be unique, and this alone is
generally worth the tradeoffs in expressiveness or performance.&lt;/p&gt;</content><author><name></name></author><category term="python" /><category term="python" /><category term="flask" /><category term="programming languages" /><summary type="html">I’ve gone back and forth about my language choices over the years. Some of those changes have been based on inexperience (Python is really easy to learn), some on curiosity (Clojure is so different! What are LISPs all about?!). Others have been based in a kind of misplaced egoism, followed by a quick return to reality: “Surely I am smart enough to use Haskell!” (reads about monads and is still mostly confused).</summary></entry><entry><title type="html">Flask vs. Django</title><link href="https://radglob.com/blog/python/frameworks/2015/12/02/flask-vs-django.html" rel="alternate" type="text/html" title="Flask vs. Django" /><published>2015-12-02T19:00:00-05:00</published><updated>2015-12-02T19:00:00-05:00</updated><id>https://radglob.com/blog/python/frameworks/2015/12/02/flask-vs-django</id><content type="html" xml:base="https://radglob.com/blog/python/frameworks/2015/12/02/flask-vs-django.html">&lt;p&gt;I really like Clojure. A lot. Since I’ve started using it seriously, I find
myself going to it to solve most of my problems. My previous go-to language was
Python. It has its share of issues (GIL, for example), but overall, it’s a joy
to work in. Given its ease of use, it’s quite a popular language as well. As
such, it’s pretty easy to find developers who know it, or are at least
comfortable with it.&lt;/p&gt;

&lt;p&gt;As much as I like Clojure, developer onboarding is a concern when starting a new
project.  Some friends approached me to help them with an idea they had. They’re
both non-technical, so any decisions in this realm were left up to me. I would
have loved to use Clojure, but finding people to help develop their app would be
a little harder. So I found myself looking at Python again. Based off my
previous experience, I found myself looking at two web frameworks to build the
backend: &lt;a href=&quot;http://flask.pocoo.org&quot;&gt;Flask&lt;/a&gt; and
&lt;a href=&quot;https://www.djangoproject.com&quot;&gt;Django&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’m fairly familiar with Flask. I’ve used it to build big and small projects. I
wasn’t particularly familiar with Django, so along with doing some
tutorials/reading the documentation, I attended a few local Django meetups. The
last one got cancelled, but I was supposed to give a talk comparing the two
frameworks from my point of view. Since that meetup was cancelled, I’ve decided
to write up a blog post instead. Note that this is all based off of my somewhat
limited experience.&lt;/p&gt;

&lt;h2 id=&quot;flask&quot;&gt;Flask&lt;/h2&gt;
&lt;p&gt;Flask is great. It’s a microframework written by &lt;a href=&quot;https://twitter.com/@mitsuhiko&quot;&gt;Armin
Ronacher&lt;/a&gt;. I personally love it. It’s incredibly
flexible and easy to use. A basic app, as seen on the Flask homepage is as
simple as this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a pretty straightforward example. You import the library, generate an
app object, designate route handlers, etc. The API is very clean and easy to
understand. For these reasons, I think Flask excels for small projects, but also
for large ones (more on this shortly).&lt;/p&gt;

&lt;p&gt;The double-edged sword of Flask is its unopinionated nature. For beginners, this
presents a relatively small surface area that they need to learn. Flask handles
routing, has a templating library, and not much else. When it comes to security,
database integration, and other aspects that larger apps require, it’s up to the
developer to determine what to use. Flask really doesn’t care. This is good if
you know what you’re doing, but can be a bit intimidating if you’re new to
development. It’s easy to make bad decisions due to inexperience.&lt;/p&gt;

&lt;h2 id=&quot;django&quot;&gt;Django&lt;/h2&gt;
&lt;p&gt;Django takes a very different approach. It’s similar to Ruby on Rails -
“batteries-included”. Pretty much everything is decided for you: the database
ORM, routing, templating, etc. While this is great for getting an app up
quickly, it’s not very flexible. Swapping components, or using Django in a way
besides a monolithic app can present some challenges. That said, it does a great
job of presenting a working development pattern.&lt;/p&gt;

&lt;p&gt;The biggest downside is that, like Ruby on Rails, it requires the developers to
learn a rather large system. You have to learn how to do things the “Django
way”. Which isn’t necessarily a bad thing. It just means that you’ll generally
have to focus on learning the system first, then building your app. No
shortcuts. To make a point, the Flask example above tells you most of what you
need to know. There is a short tutorial that goes through templating and some
other features. Django is &lt;strong&gt;much&lt;/strong&gt; more complicated, requiring a lengthy
tutorial and likely some digging through documentation to understand all of what
is going on.&lt;/p&gt;

&lt;h2 id=&quot;issues-and-strengths&quot;&gt;Issues and Strengths&lt;/h2&gt;
&lt;p&gt;There are a few things surrounding the use of these frameworks worth mentioning.
The Python2/Python3 divide is mostly resolved (you should probably use Python3
unless you have a specific reason not to). Django is very up-to-date with this.
Since most of their components are specific to the Django ecosystem, they are
all up-to-date and use Python3, assuming the version of Django you are using
supports it.&lt;/p&gt;

&lt;p&gt;In contrast, while Flask &lt;em&gt;does&lt;/em&gt; support Python 3, it’s noted &lt;a href=&quot;http://flask.pocoo.org/docs/0.10/python3/&quot;&gt;on the
website&lt;/a&gt; that not all extensions do.&lt;/p&gt;

&lt;p&gt;Django also provides long-term support (LTS) releases. If you’re using Django
for a large application or simply in a large organization, these may be worth
exploring for their stability.&lt;/p&gt;

&lt;h2 id=&quot;which-should-i-use&quot;&gt;Which should I use?&lt;/h2&gt;
&lt;p&gt;Both Flask and Django are great frameworks. Given their strengths and
weaknesses, I’d recommend the following path for someone wishing to learn web
development in Python.&lt;/p&gt;

&lt;p&gt;First, learn Flask. It’s pretty small, and most people should be able to wrap
their brain around it fairly quickly. Follow the tutorial. Then, build a small
app. It could be a list making app, a Twitter bot, whatever.&lt;/p&gt;

&lt;p&gt;Once you’ve done that, go and learn Django. Build something larger with it:
maybe a CMS.&lt;/p&gt;

&lt;p&gt;Finally, go back and learn how to build a similarly large application in Flask.
This will require you to pick a number of libraries, understand how they fit
together, their tradeoffs, etc.&lt;/p&gt;

&lt;p&gt;It’s worth noting that these aren’t the only web frameworks available for
Python.  &lt;a href=&quot;https://github.com/vinta/awesome-python#web-frameworks&quot;&gt;Far from it,
actually&lt;/a&gt;. Explore all
of the options.&lt;/p&gt;</content><author><name></name></author><category term="python" /><category term="frameworks" /><category term="python" /><category term="flask" /><category term="django" /><summary type="html">I really like Clojure. A lot. Since I’ve started using it seriously, I find myself going to it to solve most of my problems. My previous go-to language was Python. It has its share of issues (GIL, for example), but overall, it’s a joy to work in. Given its ease of use, it’s quite a popular language as well. As such, it’s pretty easy to find developers who know it, or are at least comfortable with it.</summary></entry><entry><title type="html">Compojure Lessons</title><link href="https://radglob.com/blog/programming/2015/08/31/compojure-lessons.html" rel="alternate" type="text/html" title="Compojure Lessons" /><published>2015-08-31T20:00:00-04:00</published><updated>2015-08-31T20:00:00-04:00</updated><id>https://radglob.com/blog/programming/2015/08/31/compojure-lessons</id><content type="html" xml:base="https://radglob.com/blog/programming/2015/08/31/compojure-lessons.html">&lt;p&gt;I recently had the opportunity to migrate a codebase for a work project from
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NodeJS&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Clojure&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Clojurescript&lt;/code&gt;. I’ve been trying to
pick up Clojure for months now, but I found it difficult without a solid project.
Since I started porting our code over, I feel that I’m understanding how to do
things in this system at an impressive rate.&lt;/p&gt;

&lt;p&gt;That being said, I’ve hit a few issues along the way that I’d like to document,
both for myself and for others. Some of these are specific to my tech stack,
while others are likely general web stuff.&lt;/p&gt;

&lt;h3 id=&quot;put-your-404-handler-last-always&quot;&gt;Put your 404 handler last. Always.&lt;/h3&gt;
&lt;p&gt;I spent the better part of an hour trying to figure out why I could access my
index page, but not anything deeper in the app. Everything kept coming up as a&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;And not a Ring 404 page.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My code looked a bit like this.&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;;; some-api.clj&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app.some-api&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compojure.core&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:refer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compojure.route&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compojure.handler&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defroutes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some-routes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/stuff&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:apples&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:oranges&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some-api&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handler/api&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some-routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;;; interface.clj&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app.interface&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compojure.core&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:refer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compojure.route&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compojure.handler&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defroutes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interface-routes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;route/not-found&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Not Found&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handler/site&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interface-routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;;; handler.clj&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app.handler&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compojure.core&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:refer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compojure.route&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app.some-api&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:refer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some-api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app.interface&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:refer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some-routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The issue here is subtle, but obvious to the experienced developer. The 404 route
is being injected into the app after the index route, but before anything else. 
Because routes are checked in sequence, the server checks index, fails, moves on
to the 404 route, which acts as a catch-all. The fix is simple.&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;;; handler.clj FIXED&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app.handler&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some-routes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;handling-raw-post-data-with-compojure&quot;&gt;Handling raw POST data with Compojure.&lt;/h3&gt;
&lt;p&gt;I’m pretty new to Clojure. I’ve only been using it at work for about two weeks.
It’s been a pleasant learning curve - the codebase looks quite a bit better, and
is also much easier to reason about.&lt;/p&gt;

&lt;p&gt;I ran into one issue with getting raw POST data from a request using Compojure.
I’m not familiar with the system yet, so I try to get something to work, then
look it up on StackOverflow or something.&lt;/p&gt;

&lt;p&gt;Looking at the docs for Compojure, it seemed that the proper way of getting the
data from a request is to get the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:params&lt;/code&gt; map from the request. However, due
to passing raw data (I’m using &lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt; to test),
this map was empty - everything was in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:body&lt;/code&gt; map. It’s trivial to get the
data out of this.&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;some-route&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;slurp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;do-stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;clojure-vectors-to-jdbc-arrays-and-know-what-version-of-jdbc-youre-using&quot;&gt;Clojure vectors to JDBC Arrays (and know what version of JDBC you’re using).&lt;/h3&gt;
&lt;p&gt;In my data set, I need to store 3D geometry data. Using Postgres, I chose to do
this by serializing mesh data (vertices, faces, etc.) to JSON (which Postgres
lets you store!), and turning transform Vector3s into arrays. I initially
attempted to write Postgres types around arrays to ensure that these transform
components could only be arrays of length 3, but this ended up being more
trouble than it was worth.&lt;/p&gt;

&lt;p&gt;Anyway, the issue I ran into was this: going from JSON to Clojure maps was
simple (using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clojure.data.json&lt;/code&gt;) but inserting these Clojure data structures
was an issue. Simple data types, like integers and strings, were automatically
converted. Vectors were… not? I don’t actually know how they were being
entered into Postgres, but the server kept spitting an error at me. It was
stating that the number of expressions was greater than the number of columns. I
inferred this to mean that vectors weren’t being converted into an acceptable
form.&lt;/p&gt;

&lt;p&gt;I figured out what I needed to do: translate these vectors to JDBC arrays. This
process isn’t as streamlined as it could be, as you need to have an active JDBC
connection to do the conversion. To be efficient, you need to do this in a
transaction before you actually submit your query. That feels weird. But it
isn’t even the problem. My problem is even simpler than that.&lt;/p&gt;

&lt;p&gt;My vectors were storing data as doubles. Spatial coordinates neeedd to be as
specific as possible, so highest precision is preferable. To convert vectors (or
any Clojure seq) to a JDBC array, you need to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.createArrayOf&lt;/code&gt;. ex.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(.createArrayOf conn &quot;double&quot; (into-array [...]))&lt;/code&gt;. The problem here is a
versioning one. I’m using JDBCv4. All the documentation that came up when I
searched for “JDBC array types” listed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;double&lt;/code&gt; as an acceptable type. However,
in JDBCv4, this was deprecated in favor of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float&lt;/code&gt; type. So, my code needed
to look like this: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(.createArrayOf conn &quot;float&quot; (into-array [...]))&lt;/code&gt;. And this
took me longer to realize than I’m proud admitting.&lt;/p&gt;

&lt;h3 id=&quot;types-are-great--postgresql-does-pretty-strong-type-checking&quot;&gt;Types are great.  PostgreSQL does pretty strong type checking.&lt;/h3&gt;
&lt;p&gt;For a currentproject, I’m using &lt;a href=&quot;https://github.com/krisajenkins/yesql&quot;&gt;Yesql&lt;/a&gt;
to build my queries. The best part of this is that you can have casts in your
queries, which makes passing data much easier. For example, I have one record
type that describes a 3D mesh object. The schema is:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh_id&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;serial&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mesh_data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mesh_type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mesh_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh_t&lt;/code&gt; type is a simple enum type of strings representing primitive mesh
types. Using casts, I can send my mesh type as a string, but have it typed in
queries for safety.&lt;/p&gt;

&lt;p&gt;An example of this would be an insert. Such a query using Yesql would look like
this:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mesh_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ll add other bits of knowledge and wisdom as I run into them. But that’s all
for now.&lt;/p&gt;</content><author><name></name></author><category term="programming" /><category term="clojure" /><category term="compojure" /><category term="json" /><summary type="html">I recently had the opportunity to migrate a codebase for a work project from NodeJS and JavaScript to Clojure and Clojurescript. I’ve been trying to pick up Clojure for months now, but I found it difficult without a solid project. Since I started porting our code over, I feel that I’m understanding how to do things in this system at an impressive rate.</summary></entry><entry><title type="html">A better to-do app.</title><link href="https://radglob.com/blog/app%20design/2015/02/23/todo-idea.html" rel="alternate" type="text/html" title="A better to-do app." /><published>2015-02-23T19:00:00-05:00</published><updated>2015-02-23T19:00:00-05:00</updated><id>https://radglob.com/blog/app%20design/2015/02/23/todo-idea</id><content type="html" xml:base="https://radglob.com/blog/app%20design/2015/02/23/todo-idea.html">&lt;p&gt;I’ve been learning Clojure lately. It does a lot of things right as a languages.
But I don’t think we should stop there. The same principles that make a good
language could be applied to application design.&lt;/p&gt;

&lt;p&gt;One thing that has bothered me since I got a smartphone is the number of to-do
apps. Building a to-do app is a great way to learn most web frameworks (and
probably mobile ones too?), but that doesn’t mean they need to all be published.
Worse still is the fact that very few of them do anything novel. Simple design
and ease of use is great, but we aren’t creating anymore of an experience that
pen and paper.&lt;/p&gt;

&lt;p&gt;My idea is this: let the user control their data. In my personal day, I need to
keep track of numerous things, and each would benefit from a different
organizatonal structure. For tracking coursework, I want to be able to input
assignments based off of class, and I want to be able to bind due dates and
other related information. I also need to buy food. A grocery list is a very
different type of list. I need to track quantity for one. I also tend to need
to the same things (milk, bread, eggs, etc.) week to week. Being able to have
recurring items would be fantastic.&lt;/p&gt;

&lt;p&gt;I know that all of these things are available in a number of different apps. But
that’s the crux of the problem: why do I need so many different apps to handle
day to day life? Give me one to-do app that puts me in control of my
information, and I’d gladly pay for it.&lt;/p&gt;</content><author><name></name></author><category term="App Design" /><category term="app idea" /><summary type="html">I’ve been learning Clojure lately. It does a lot of things right as a languages. But I don’t think we should stop there. The same principles that make a good language could be applied to application design.</summary></entry></feed>